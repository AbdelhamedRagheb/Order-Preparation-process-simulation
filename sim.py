# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18CJNcHxdKSNTTj8UPURudKEa3_RNeUSu
"""

import queue
import random
import time

# Item class
class Item:
    def __init__(self, name="item", price=1, quantity=5, available=True):
        self.name = name
        self.price = price
        self.quantity = quantity
        self.available = available

    def __str__(self):
        return f"Item: {self.name}, price: {self.price}, quantity: {self.quantity}, available: {self.available}"

# Order class
class Order:
    def __init__(self, ID=0, items=None, arrive_time=0):
        if items is None:
            items = []
        self.ID = ID
        self.items = items
        self.state = "start"
        self.total_price = sum(item.price for item in items)
        self.arrive_time = arrive_time
        self.waiting_times = []
        self.total_time = 0

    def add_item(self, item):
        self.items.append(item)

    def add_waiting_time(self, waiting_time):
        self.waiting_times.append(waiting_time)

    def get_total_waiting_time(self):
        return sum(self.waiting_times)

    def get_service_time(self):
        return self.total_time - self.get_total_waiting_time()

    def __str__(self):
        return (f"Order: {self.ID}\nState: {self.state}, Arrive time: {self.arrive_time}, "
                f"Waiting times: {self.waiting_times}, Total time: {self.total_time:.2f}, "
                f"Service: {self.get_service_time():.2f}, "
                f"Total waiting time: {self.get_total_waiting_time():.2f}\n"
                f"Items: {[str(x) for x in self.items]}")

# Stage class
class Stage:
    def __init__(self, stage_name, next_stage=None, N_employees=1):
        self.stage_name = stage_name
        self.next_stage = next_stage
        self.employees = [{"id": i, "busy": False} for i in range(N_employees)]
        self.service_time = random.uniform(1, 5)  # random time between 1-5 seconds
        self.wait_queue = queue.Queue()

    def process_order_in_stage(self, order):
        for employee in self.employees:
            if not employee["busy"]:
                employee["busy"] = True
                print(f"[{self.stage_name}] Order {order.ID} is being processed by employee {employee['id']}...")
                time.sleep(self.service_time)  # simulate service time
                order.total_time += self.service_time
                order.add_waiting_time(0)  # simplified, assuming no wait for now
                order.buzy = self.stage_name
                employee["busy"] = False

                if self.next_stage:
                    self.next_stage.wait_queue.put(order)
                    print(f"Order {order.ID} moved to next stage: '{self.next_stage.stage_name}'\n")
                else:
                    order.buzy = "Completed"
                    print(f"✅ Order {order.ID} is completed!\n")
                break
        else:
            print(f"All employees busy at '{self.stage_name}'. Order {order.ID} added to queue.")
            self.wait_queue.put(order)

    def process_queue(self):
        while not self.wait_queue.empty():
            order = self.wait_queue.get()
            self.process_order_in_stage(order)

# ---------- MAIN ----------
if __name__ == "__main__":
    # Create items
    burger = Item("Burger", 20)
    fries = Item("Fries", 10)
    cola = Item("Cola", 5)

    # Create an order
    order1 = Order(1, [burger, fries, cola])
    order2 = Order(2, [burger])
    order3 = Order(3, [cola, fries])

    # Create stages
    delivery = Stage("Delivery")
    packing = Stage("Packing", delivery)
    kitchen = Stage("Kitchen", packing)
    receiving = Stage("Order Received", kitchen)

    # Start simulation
    orders = [order1, order2, order3]
    for order in orders:
        receiving.process_order_in_stage(order)

    # Process queues of each stage
    stages = [receiving, kitchen, packing, delivery]
    while any(not stage.wait_queue.empty() for stage in stages):
        for stage in stages:
            stage.process_queue()

import matplotlib.pyplot as plt
import networkx as nx

# تعريف المراحل الأساسية لمسار الطلب
stages = [
    "Customer Order",
    "Receiving Stage",
    "Preparation Stage",
    "Packaging Stage",
    "Delivery Stage"
]

# إنشاء مخطط موجه
G = nx.DiGraph()

# تحديد العلاقات بين المراحل لتمثيل المسار
edges = [
    ("Customer Order", "Receiving Stage"),
    ("Receiving Stage", "Preparation Stage"),
    ("Preparation Stage", "Packaging Stage"),
    ("Packaging Stage", "Delivery Stage")
]

# إضافة المسارات إلى المخطط
G.add_edges_from(edges)

# تحديد مواضع العقد بشكل جميل
pos = nx.spring_layout(G, seed=42)

# رسم المخطط
plt.figure(figsize=(10, 6))
nx.draw(
    G, pos,
    with_labels=True,
    node_color='orange',
    node_size=3000,
    font_size=12,
    font_weight='bold',
    arrows=True,
    arrowsize=20
)
plt.title("Order Flow in Restaurant System Using PLC")
plt.show()